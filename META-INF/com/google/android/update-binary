#!/sbin/sh
#

ZIPFILE=$3
OUTFD=$2

lversion=4.9.196
kversion=1.0.50
build=1
kname=APGK
tagline='A pretty good kernel.'
version_str="$kname $lversion-$kversion-$build"
scr_wdth=50

# Detect real $OUTFD
#
readlink /proc/$$/fd/$OUTFD 2>/dev/null | grep /tmp >/dev/null
if [ $? -eq 0 ]; then
  OUTFD=0
  for FD in $( ls /proc/$$/fd ); do
    readlink /proc/$$/fd/$FD 2>/dev/null | grep pipe >/dev/null
    if [ $? -eq 0 ]; then
      ps | grep " 3 $FD " | grep -v grep >/dev/null
      if [ $? -eq 0 ]; then
	OUTFD=$FD
	break
      fi
    fi
  done
fi

get_key() {
  local key=$( LD_LIBRARY_PATH=/system/lib64 \
                /system/bin/getevent -lqc 1  | awk '{ print $(NF-1) }' )
  [ $key = 02bf ] && key=KEY_BIXBY

  echo $key
}

q_and_a() {
  local q=$1
  shift

  # The strange formatting is to keep ui_print() happy.
  #
  local choice="[Vol Up]   = $1\nui_print      [Vol Down] = $2\n"
  [ -n "$3" ] && choice="[Bixby]    = $3\nui_print      $choice"

  ui_print " "
  ui_print " - $q"
  ui_print "     $choice"

  local n=99
  until [ $n -le $# ]; do
    unset UP DOWN BIXBY
    local a=$(get_key)

    case $a in
      *UP)
        UP=true
        n=1
        ;;
      *DOWN)
        DOWN=true
        n=2
        ;;
      *BIXBY)
        BIXBY=true
        n=3
        ;;
      *)
	n=99
        ;;
    esac

  done

  CHOICE=$(eval echo '$'$n)
  ui_print "   '$CHOICE' selected."
}

ui_print() {
  echo -ne "ui_print $1\n" >> /proc/self/fd/$OUTFD
  echo -ne "ui_print\n" >> /proc/self/fd/$OUTFD
}

print_full_bar() {
  ui_print "$(printf '%*s\n' $scr_wdth | tr ' ' '=')"
}

print_justified() {
  local str="$1"
  local str_len=${#str}
  local padding_len=$(( ($scr_wdth - $str_len - 2) / 2))
  local ljust="$(printf '%*s' $padding_len)"
  local rjust="$(printf '%*s' $(($padding_len + $str_len % 2)))"

  ui_print "=$ljust$str$rjust="
}

resolve_link() {
  if [ -z "$1" ] || [ ! -e $1 ]; then
    return 1
  fi
  local VAR=$1
  while [ -L $VAR ]; do
    VAR=$(readlink $VAR)
  done
  echo $VAR
}

unzip_file() {
  unzip -l "$ZIPFILE" | grep "$1" >/dev/null || return 1
  unzip -p "$ZIPFILE" $1 > $2
  return $?
}

ui_print " "
print_full_bar
print_justified "$version_str"
print_justified "$tagline"
print_full_bar
ui_print " "

bl=$( getprop ro.boot.bootloader )

# Firmware version starts at either 8th or 9th character, depending on length
# of bootloader string (12 or 13).
#
fw=${bl:$((${#bl} - 4)):4}

# Device is either 4 or 5 characters long, depending on length of bootloader
# string.
#
device=${bl:0:$((${#bl} - 8))}

model=${device:0:4}
suffix=${device:4}

# BusyBox shell sucks.
#
#if [[ $device != G96[05][FN] ]]; then
if ! ( [ $model = G960 ] || [ $model = G965 ] &&
       [ $suffix = F ]   || [ $suffix = N ] ); then
  ui_print " - Unsupported device detected. Installation aborted."
  ui_print " "
  exit 1
fi

ui_print " - Detected a $device device with $fw bootloader."

[ $suffix = N ] &&
  ui_print " - NOTE: '$suffix' device support is experimental."

BOOT=$(resolve_link $(find /dev/block/platform -type l -iname boot))

if [ -z "$BOOT" ]; then
  ui_print " - No boot partition found. Installation aborted."
  ui_print " "
  exit 1
fi

ZIPNAME=${ZIPFILE##*/}

# Check for engineering kernel.
#
[ $ZIPNAME != ${ZIPNAME/-ENG//} ] && ENG=-ENG

if [ $ZIPNAME != ${ZIPNAME/_interactive//} ] ||
  [ -f /external_sd/.apgk_interactive ]; then
  INTERACTIVE=true

  ui_print " - Interactive installation selected."

  # /system needed for getevent command.
  #
  awk '$2 == "/system" { exit 1 }' /proc/mounts && mount -o ro /system

  q_and_a 'Type of kernel to install?' overclock$ENG underclock$ENG standard$ENG
  [ -n "$UP" ] && OVERCLOCK=true
  [ -n "$DOWN" ] && UNDERCLOCK=true

  q_and_a 'Install Magisk afterwards?' yes no
  [ -n "$UP" ] && MAGISK=true

  umount /system

  ui_print " "
else
  # Attempt to infer choice of kernel from archive name or dotfile.
  #
  if [ $ZIPNAME != ${ZIPNAME/_underclock//} ] ||
    [ -f /external_sd/.apgk_underclock ]; then
    UNDERCLOCK=true
  fi

  if [ $ZIPNAME != ${ZIPNAME/_overclock//} ] ||
    [ -f /external_sd/.apgk_overclock ]; then
    OVERCLOCK=true
  fi

  # Attempt to infer desire to install Magisk from archive name.
  #
  [ $ZIPNAME != ${ZIPNAME/_magisk//} ] && MAGISK=true
fi

# Now get to work.
#
for i in boot-$kname-$lversion-$kversion$ENG-$build-g965.img \
	 boot-$kname-$lversion-$kversion-oc$ENG-$build-g965.img.bsdiff \
	 boot-$kname-$lversion-$kversion-uc$ENG-$build-g965.img.bsdiff \
	 boot-$kname-$lversion-$kversion$ENG-$build-g960.img.bsdiff \
	 boot-$kname-$lversion-$kversion-oc$ENG-$build-g960.img.bsdiff \
	 boot-$kname-$lversion-$kversion-uc$ENG-$build-g960.img.bsdiff \
	 bspatch; do
  unzip_file $i /tmp/$i
done

bspatch=/tmp/bspatch
chmod 755 $bspatch

image=standard
variant=""
src_img=/tmp/boot-$kname-$lversion-$kversion$ENG-$build-g965.img
g960_img=/tmp/boot-$kname-$lversion-$kversion$ENG-$build-g960.img

if [ "$OVERCLOCK" = true ]; then
  image=overclock
  variant=-oc
elif [ "$UNDERCLOCK" = true ]; then
  image=underclock
  variant=-uc
fi

lmodel=$( echo $model | tr '[A-Z]' '[a-z]' )
dst_img=/tmp/boot-$kname-$lversion-$kversion$variant$ENG-$build-$lmodel.img

if [ -f $dst_img.bsdiff ]; then
  ui_print " - Constructing $image$ENG kernel for $device..."

  if [ $model = G960 ] && [ -n "$variant" ]; then
    # First produce the standard G960F image, because the oc and uc deltas
    # are based on that.
    #
    $bspatch $src_img $g960_img $g960_img.bsdiff
    src_img=$g960_img
  fi

  [ -f $dst_img ] || $bspatch $src_img $dst_img $dst_img.bsdiff
fi

ui_print " - Flashing $image$ENG boot image onto $device..."
[ -n "$debug" ] && ui_print " - dd if=$dst_img of=$BOOT"

/sbin/dd if=$dst_img of=$BOOT

ui_print " - Installation completed."

# Check for dotfile existence and install Magisk if present.
#
int=/sdcard/Download	# The standard download location on internal SD card.
ext=/external_sd	# The external SD card, if present.
mfile=.apgk_magisk	# The name of the file to look for.

# If $mfile exists at none of these locations, the APGK zip file doesn't
# contain _magisk in the name and we didn't interactively request Magisk,
# we are finished.
#
if ( ([ ! -f $int/$mfile ] && [ ! -f $ext/$mfile ]) || "$INTERACTIVE" = true) \
  && [ -z "$MAGISK" ]; then
  ui_print " - You may now root the device at your discretion."
  ui_print " "

  exit 0
fi

# Find the most recent build of Magisk from the various locations.
#
# The order of precedence is:
#
# 1. Files with an explicit version in their name, e.g kantjer and ianmacd
#    builds.
# 2. Unversioned files that indicate a release build with their name, e.g.
#    official Canary channel release builds.
# 3. Unversioned files that indicate a debug build with their name, e.g.
#    official Canary channel debug builds.
# 4. Unversioned files matching the pattern [Mm]agisk.zip, e.g. files
#    extracted from ROMs, etc.
#
# Lexical sort order is used for category 1. The timestamp of the file is used
# for all others. If no files are found, we cannot proceed.
#
magisk=$( { ls -r $int/Magisk-v* $ext/Magisk/Magisk-v* 2>/dev/null;
	    ls -t $int/magisk-release.zip
		  $ext/Magisk/magisk-release.zip 2>/dev/null;
	    ls -t $int/magisk-debug.zip
		  $ext/Magisk/magisk-debug.zip 2>/dev/null;
	    ls -t $int/[Mm]agisk.zip
	    $ext/Magisk/[Mm]agisk.zip 2>/dev/null; } | head -n 1 )
if [ ! -f "$magisk" ]; then
  ui_print " - No Magisk zip file found."
  ui_print " "

  exit 1
fi

ui_print " - Installing ${magisk##*/}..."
ui_print " "

tmp=/tmp/magisk
mkdir $tmp
unzip -d $tmp $magisk META-INF/com/google/android/\*
exec /sbin/sh $tmp/META-INF/com/google/android/update-binary dummy $OUTFD $magisk
