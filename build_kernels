#!/bin/sh -x

rm_version() {
  [ -f .version ] && rm .version
}

build() {
  kconfigure() {
    local feature=$1
    local value=$2

    sed -i -e 's/^.*CONFIG_'$feature'=.\+$/CONFIG_'$feature'="'"$value"'"/' .config
  }

  kenable() {
    local feature=$1

    sed -i -e "s/^.*CONFIG_$feature.\+$/CONFIG_$feature=y/" .config
  }

  kdisable() {
    local feature=$1

    sed -i -e "s/^.*CONFIG_$feature.\+$/# CONFIG_$feature is not set/" .config
  }

  pack_boot_img() {
    local variant=$1

    cp -p $archdir/boot/Image $imgdir/$dev/$firmware/AIK-Linux/split_img/boot.img-zImage || exit 1
    cp -p $archdir/boot/dtb.img $imgdir/$dev/$firmware/AIK-Linux/split_img/boot.img-dtb || exit 1
    cd $imgdir/$dev/$firmware/AIK-Linux
    ./repackimg.sh || exit 1
    mv image-new.img $imgdir/$dev/boot-$my_kernel-$linux_v-$my_ver$variant-$build-$dev.img
    cd -
  }

  local dev=$1
  local config=$2
  local eng=$3

  echo Make $dev standard$ENG...

  export ANDROID_MAJOR_VERSION=o
  rm_version; make clean && make $config
  kconfigure LOCALVERSION "-$my_kernel-$my_ver$ENG"

  if [ -n "$eng" ]; then
    # Enable engineering options.
    kenable ASSISTED_SUPERUSER
  fi

  make -j$(nproc) || exit 1

  pack_boot_img $ENG

  echo Make $dev overclock$ENG...
  kenable MALI_OVERCLOCK
  kenable PELT_HALFLIFE_8
  kdisable PELT_HALFLIFE_16
  kconfigure LOCALVERSION "-$my_kernel-$my_ver-oc$ENG"
  kconfigure CMDLINE "$cmd_oc"
  rm_version; echo 2 | make oldconfig
  make -j$(nproc) || exit 1

  pack_boot_img -oc$ENG

  echo Make $dev underclock$ENG...
  kdisable MALI_OVERCLOCK
  kdisable PELT_HALFLIFE_8
  kenable PELT_HALFLIFE_16
  kconfigure LOCALVERSION "-$my_kernel-$my_ver-uc$ENG"
  kconfigure CMDLINE "$cmd_uc"
  rm_version #; echo 2 | make oldconfig
  make -j$(nproc) || exit 1

  pack_boot_img -uc$ENG
}

package() {
  update_bin=$zipdir/META-INF/com/google/android/update-binary

  sed -i -e "s/^lversion=.\+$/lversion=$linux_v/" \
	 -e "s/^kversion=.\+$/kversion=$my_ver/" \
         -e "s/^build=.\+$/build=$build/" \
         -e "s/^tagline=.\*$/tagline=$build/" $update_bin

  rm -f $zipdir/*.{img,bsdiff}
  cp -p $imgdir/g965/boot-APGK-$linux_v-$my_ver$ENG-$build-g965.img $zipdir ||
    exit 1

  bsdiff $zipdir/boot-APGK-$linux_v-$my_ver$ENG-$build-g965.img \
	 $imgdir/g965/boot-APGK-$linux_v-$my_ver-oc$ENG-$build-g965.img \
	 $zipdir/boot-APGK-$linux_v-$my_ver-oc$ENG-$build-g965.img.bsdiff &

  bsdiff $zipdir/boot-APGK-$linux_v-$my_ver$ENG-$build-g965.img \
	 $imgdir/g965/boot-APGK-$linux_v-$my_ver-uc$ENG-$build-g965.img \
	 $zipdir/boot-APGK-$linux_v-$my_ver-uc$ENG-$build-g965.img.bsdiff &

  bsdiff $zipdir/boot-APGK-$linux_v-$my_ver$ENG-$build-g965.img \
	 $imgdir/g960/boot-APGK-$linux_v-$my_ver$ENG-$build-g960.img \
	 $zipdir/boot-APGK-$linux_v-$my_ver$ENG-$build-g960.img.bsdiff &

  bsdiff $imgdir/g960/boot-APGK-$linux_v-$my_ver$ENG-$build-g960.img \
	 $imgdir/g960/boot-APGK-$linux_v-$my_ver-oc$ENG-$build-g960.img \
	 $zipdir/boot-APGK-$linux_v-$my_ver-oc$ENG-$build-g960.img.bsdiff &

  bsdiff $imgdir/g960/boot-APGK-$linux_v-$my_ver$ENG-$build-g960.img \
	 $imgdir/g960/boot-APGK-$linux_v-$my_ver-uc$ENG-$build-g960.img \
	 $zipdir/boot-APGK-$linux_v-$my_ver-uc$ENG-$build-g960.img.bsdiff &

  wait

  rm -f $stagedir/APGK-$my_ver$ENG-$build.zip
  cd $zipdir
  7za a -tzip -x'!.*' -mx9 $stagedir/APGK-$my_ver$ENG-$build.zip
}

root=~/src
stagedir=$root/apgk
imgdir=$stagedir/img
zipdir=$stagedir/zip
archdir=arch/arm64

linux_v=$(make kernelversion 2>/dev/null)
my_kernel=APGK
my_ver=1.0.54
firmware=bsb1
build=1
tagline='A pretty good kernel.'

argv=$( getopt -o aenp --long all,eng,g960,g965,no-package,package-only -- "$@" )

eval set -- "$argv"

while :; do
  case "$1" in
    -a|--all)
      echo Option $1.
      shift
      build_g960=true
      build_g965=true
      continue
      ;;
    -e|--eng|--engineering)
      echo Option $1.
      shift
      eng=true
      ENG=-ENG
      continue
      ;;
    --g965)
      echo Option $1.
      shift
      build_g965=true
      continue
      ;;
    --g960)
      echo Option $1.
      shift
      build_g960=true
      continue
      ;;
    -n|--no-package)
      echo Option $1.
      shift
      no_package=true
      continue
      ;;
    -p|--package-only)
      echo Option $1.
      shift
      package_only=true
      continue
      ;;
    --)
      shift
      break
      ;;
    *)
      echo getopt error!
      echo $1
      exit 1
      ;;
  esac
done

if [ -z "$build_g960" ] && [ -z "$build_g965" ] &&
   [ -z "$package_only" ]; then
  echo Must use at least one of: -a --g960 --g965 -p >&2
  exit 1
fi

if [[ "$1" == [0-9]* ]]; then
  build=$1
  shift
fi

cmd_oc='cpu_overclock=2 gpu_overclock=y cpu_max_c1=2002000 cpu_max_c2=2964000'
cmd_uc='cpu_max_c2=2314000'

if [ -n "$package_only" ]; then
  package
  exit 0
fi

sudo -p 'sudo needed for packing boot images. Enter password: ' echo

# Force check of WireGuard version.
#
rm -f net/wireguard/.check

[ -n "$build_g965" ] && build g965 exynos9810-star2lte_calikernel_defconfig $eng
[ -n "$build_g960" ] && build g960 exynos9810-starlte_calikernel_defconfig $eng

if [ -z "$no_package" ]; then
  package
fi
